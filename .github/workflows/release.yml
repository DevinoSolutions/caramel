name: Release â€“ Extension

on:
  pull_request:
    types: [closed]
    branches: [main]

  push:
    branches: [dev]

env:
  SAFARI_BUNDLE_ID: ${{ vars.SAFARI_BUNDLE_ID }}
  WORKING_DIRECTORY: ${{ vars.WORKING_DIRECTORY }}
  APP_NAME:      ${{ vars.APP_NAME }}
  MAC_CATEGORY:  ${{ vars.MAC_CATEGORY }}

jobs:
  package:
    name: "ðŸ“¦ Package Extension"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    # only run when a PR into main is merged
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install

      - name: Build extension
        run: pnpm run build

      - name: Package extension
        run: pnpm run package

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: extension-package
          path: ${{ env.WORKING_DIRECTORY }}/extension.zip

  publish_chrome:
    name: "ðŸš€ Publish to Chrome Web Store"
    needs: package
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: extension-package
          path: .

      - name: Test Chrome Web Store auth
        shell: bash
        run: |
          ACCESS_TOKEN=$(curl -s \
            -d client_id=${{ secrets.CHROME_CLIENT_ID }} \
            -d client_secret=${{ secrets.CHROME_CLIENT_SECRET }} \
            -d grant_type=refresh_token \
            -d refresh_token=${{ secrets.CHROME_REFRESH_TOKEN }} \
            https://www.googleapis.com/oauth2/v4/token \
            | jq -r .access_token)
          curl -I -H "Authorization: Bearer $ACCESS_TOKEN" \
            https://www.googleapis.com/chromewebstore/v1.1/items/${{ secrets.CHROME_EXTENSION_ID }}?projection=DRAFT

      - name: Upload to Chrome Web Store (upload-only)
        uses: mnao305/chrome-extension-upload@v5.0.0
        with:
          file-path: extension.zip
          extension-id: ${{ secrets.CHROME_EXTENSION_ID }}
          client-id:    ${{ secrets.CHROME_CLIENT_ID }}
          client-secret: ${{ secrets.CHROME_CLIENT_SECRET }}
          refresh-token: ${{ secrets.CHROME_REFRESH_TOKEN }}
          publish: false

  publish_safari:
    name: "ðŸš€ Publish to Apple App Store (Safari & iOS)"
    needs: package
    runs-on: macos-latest
    env:
      ASC_KEY_ID: ${{ secrets.ASC_KEY_ID }}
      ASC_ISSUER_ID: ${{ secrets.ASC_ISSUER_ID }}
      ASC_API_KEY_BASE64: ${{ secrets.ASC_API_KEY_BASE64 }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
    timeout-minutes: 30
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    steps:
      - uses: actions/checkout@v4
      - name: Select Xcode 16
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: extension-package
          path: ${{ env.WORKING_DIRECTORY }}
      - name: Unzip extension
        run: unzip -q extension.zip
      - name: Install ImageMagick and jq
        run: |
          if ! command -v convert >/dev/null 2>&1; then brew install imagemagick; fi
          if ! command -v jq      >/dev/null 2>&1; then brew install jq; fi
      - name: Setup temporary scripts directory
        run: |
          mkdir -p /tmp/safari-icon-scripts
          cp ${{ github.workspace }}/.github/workflows/scripts/generate-safari-icons.sh /tmp/safari-icon-scripts/
          cp ${{ github.workspace }}/.github/workflows/scripts/update-safari-icons.sh   /tmp/safari-icon-scripts/
          chmod +x /tmp/safari-icon-scripts/*.sh
      - name: Generate Safari icons
        run: /tmp/safari-icon-scripts/generate-safari-icons.sh icons/original.png
      - name: Install App Store Connect API key
        run: |
          echo "${ASC_API_KEY_BASE64}" | base64 --decode > "/tmp/AuthKey_${ASC_KEY_ID}.p8"
          ls -l "/tmp/AuthKey_${ASC_KEY_ID}.p8"
        env:
          ASC_API_KEY_BASE64: ${{ secrets.ASC_API_KEY_BASE64 }}
          ASC_KEY_ID:        ${{ secrets.ASC_KEY_ID }}
      - name: Install App Store Connect CLI
        run: |
          brew tap ittybittyapps/appstoreconnect-cli
          brew install --HEAD appstoreconnect-cli
      - name: Get latest versions for macOS and iOS and bump
        id: get_versions
        env:
          ASC_KEY_ID:         ${{ secrets.ASC_KEY_ID }}
          ASC_ISSUER_ID:      ${{ secrets.ASC_ISSUER_ID }}
          ASC_API_KEY_BASE64: ${{ secrets.ASC_API_KEY_BASE64 }}
          SAFARI_BUNDLE_ID:   ${{ env.SAFARI_BUNDLE_ID }}
          PR_TITLE:           ${{ github.event.pull_request.title }}
        run: |
          bump="patch"
          title=$(echo "$PR_TITLE" | tr '[:upper:]' '[:lower:]')
          [[ "$title" == *feature* ]] && bump="minor"
          [[ "$title" == *major*   ]] && bump="major"
          [[ "$title" == *fix*     ]] && bump="patch"

          mkdir -p private_keys
          echo "$ASC_API_KEY_BASE64" | base64 --decode > private_keys/AuthKey_$ASC_KEY_ID.p8
          export APPSTORE_CONNECT_API_KEY_ID="$ASC_KEY_ID"
          export APPSTORE_CONNECT_ISSUER_ID="$ASC_ISSUER_ID"
          export APPSTORE_CONNECT_API_KEY="$(cat private_keys/AuthKey_${ASC_KEY_ID}.p8)"

          asc testflight builds list \
            --filter-bundle-ids "$SAFARI_BUNDLE_ID" \
            --include-expired --limit 10 \
            --api-key-id "$ASC_KEY_ID" \
            --api-issuer "$ASC_ISSUER_ID" \
            --json > builds.json || true

          mac_entry=$(jq '[.[] | select(.platform=="MAC_OS")] | sort_by(.uploadedDate) | .[-1]' builds.json)
          ios_entry=$(jq '[.[] | select(.platform=="IOS")]   | sort_by(.uploadedDate) | .[-1]' builds.json)

          MACOS_CURRENT_VERSION=$( echo "$mac_entry" | jq -r '.version      // "1.0.0"' )
          MACOS_CURRENT_BUILD=$( echo "$mac_entry" | jq -r '.buildNumber // "1"' )
          IOS_CURRENT_VERSION=$( echo "$ios_entry" | jq -r '.version      // "1.0.0"' )
          IOS_CURRENT_BUILD=$( echo "$ios_entry" | jq -r '.buildNumber // "1"' )

          IFS='.' read -r major minor patch <<< "$MACOS_CURRENT_VERSION"
          case "$bump" in
            major) major=$((major+1)); minor=0; patch=0;;
            minor) minor=$((minor+1)); patch=0;;
            *)     patch=$((patch+1));;
          esac
          MACOS_VERSION="$major.$minor.$patch"
          MACOS_BUILD=$((MACOS_CURRENT_BUILD+1))

          IFS='.' read -r i_major i_minor i_patch <<< "$IOS_CURRENT_VERSION"
          case "$bump" in
            major) i_major=$((i_major+1)); i_minor=0; i_patch=0;;
            minor) i_minor=$((i_minor+1)); i_patch=0;;
            *)     i_patch=$((i_patch+1));;
          esac
          IOS_VERSION="$i_major.$i_minor.$i_patch"
          IOS_BUILD=$((IOS_CURRENT_BUILD+1))

          echo "IOS_VERSION_NAME=$IOS_VERSION"     >> $GITHUB_ENV
          echo "IOS_BUILD_NUM=$IOS_BUILD"         >> $GITHUB_ENV
          echo "MACOS_VERSION_NAME=$MACOS_VERSION">> $GITHUB_ENV
          echo "MACOS_BUILD_NUM=$MACOS_BUILD"     >> $GITHUB_ENV

      - name: Import distribution cert
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.APPLE_CERT_P12 }}
          p12-password:    ${{ secrets.APPLE_CERT_PASSWORD }}
          keychain:        signing_temp
          keychain-password: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Import development cert
        uses: apple-actions/import-codesign-certs@v2
        with:
          create-keychain: false
          keychain:        signing_temp
          p12-file-base64: ${{ secrets.APPLE_DEV_CERT_P12 }}
          p12-password:    ${{ secrets.APPLE_DEV_CERT_PASSWORD }}
          keychain-password: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Convert to Safari app (macOS & iOS)
        run: |
          xcrun safari-web-extension-converter dist \
            --project-location SafariExtProject \
            --app-name "${{ env.APP_NAME }}" \
            --bundle-identifier "${SAFARI_BUNDLE_ID}" \
            --no-open --no-prompt --force --copy-resources

      - name: Update Safari icons
        run: /tmp/safari-icon-scripts/update-safari-icons.sh SafariExtProject/${{ env.APP_NAME }} safari-icons

      - name: Clean up script files from project
        run: find SafariExtProject -name "*.sh" -delete

      - name: Patch macOS Info.plist LSApplicationCategoryType
        run: |
          find SafariExtProject/${{ env.APP_NAME }} -name Info.plist -print0 | \
          while IFS= read -r -d '' plist; do
            /usr/libexec/PlistBuddy -c "Add :LSApplicationCategoryType string ${MAC_CATEGORY}" "$plist" \
              2>/dev/null || \
            /usr/libexec/PlistBuddy -c "Set :LSApplicationCategoryType ${MAC_CATEGORY}" "$plist"
          done

      - name: Build & archive (macOS)
        run: |
          xcodebuild archive \
            -project SafariExtProject/${{ env.APP_NAME }}/${{ env.APP_NAME }}.xcodeproj \
            -scheme "${{ env.APP_NAME }} (macOS)" \
            -configuration Release \
            -archivePath SafariExtProject/${{ env.APP_NAME }}-macos.xcarchive \
            CODE_SIGN_STYLE=Automatic \
            DEVELOPMENT_TEAM="${{ secrets.APPLE_TEAM_ID }}" \
            MARKETING_VERSION="${{ env.MACOS_VERSION_NAME }}" \
            CURRENT_PROJECT_VERSION="${{ env.MACOS_BUILD_NUM }}" \
            ARCHS="arm64 x86_64" \
            VALID_ARCHS="arm64 x86_64" \
            ONLY_ACTIVE_ARCH=NO \
            ENABLE_HARDENED_RUNTIME=YES \
            -allowProvisioningUpdates \
            -authenticationKeyPath "/tmp/AuthKey_${ASC_KEY_ID}.p8" \
            -authenticationKeyID "${ASC_KEY_ID}" \
            -authenticationKeyIssuerID "${ASC_ISSUER_ID}"

      - name: Build & archive (iOS)
        run: |
          xcodebuild archive \
            -project SafariExtProject/${{ env.APP_NAME }}/${{ env.APP_NAME }}.xcodeproj \
            -scheme "${{ env.APP_NAME }} (iOS)" \
            -destination "generic/platform=iOS" \
            -configuration Release \
            -archivePath SafariExtProject/${{ env.APP_NAME }}-ios.xcarchive \
            CODE_SIGN_STYLE=Automatic \
            DEVELOPMENT_TEAM="${{ secrets.APPLE_TEAM_ID }}" \
            MARKETING_VERSION="${{ env.IOS_VERSION_NAME }}" \
            CURRENT_PROJECT_VERSION="${{ env.IOS_BUILD_NUM }}" \
            ENABLE_HARDENED_RUNTIME=YES \
            -allowProvisioningUpdates \
            -authenticationKeyPath "/tmp/AuthKey_${ASC_KEY_ID}.p8" \
            -authenticationKeyID "${ASC_KEY_ID}" \
            -authenticationKeyIssuerID "${ASC_ISSUER_ID}"

      - name: Write exportOptions (macOS)
        run: |
          cat > /tmp/exportOptionsMac.plist <<'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>app-store-connect</string>
            <key>signingStyle</key><string>automatic</string>
            <key>teamID</key><string>${{ secrets.APPLE_TEAM_ID }}</string>
          </dict>
          </plist>
          EOF

      - name: Write exportOptions (iOS)
        run: |
          cat > /tmp/exportOptionsIOS.plist <<'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>app-store-connect</string>
            <key>signingStyle</key><string>automatic</string>
            <key>teamID</key><string>${{ secrets.APPLE_TEAM_ID }}</string>
          </dict>
          </plist>
          EOF

      - name: Export (macOS)
        run: |
          xcodebuild -exportArchive \
            -archivePath SafariExtProject/${{ env.APP_NAME }}-macos.xcarchive \
            -exportOptionsPlist /tmp/exportOptionsMac.plist \
            -exportPath SafariExtProject/Exported-macos \
            -allowProvisioningUpdates \
            -authenticationKeyPath "/tmp/AuthKey_${ASC_KEY_ID}.p8" \
            -authenticationKeyID "${ASC_KEY_ID}" \
            -authenticationKeyIssuerID "${ASC_ISSUER_ID}"

      - name: Export (iOS)
        run: |
          xcodebuild -exportArchive \
            -archivePath SafariExtProject/${{ env.APP_NAME }}-ios.xcarchive \
            -exportOptionsPlist /tmp/exportOptionsIOS.plist \
            -exportPath SafariExtProject/Exported-ios \
            -allowProvisioningUpdates \
            -authenticationKeyPath "/tmp/AuthKey_${ASC_KEY_ID}.p8" \
            -authenticationKeyID "${ASC_KEY_ID}" \
            -authenticationKeyIssuerID "${ASC_ISSUER_ID}"

      - name: Upload macOS pkg to App Store Connect
        env:
          ALTOOL_USER:     ${{ secrets.APPLE_ID }}
          ALTOOL_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
        run: |
          xcrun altool --upload-app \
            -f SafariExtProject/Exported-macos/${{ env.APP_NAME }}.pkg \
            -t osx -u "$ALTOOL_USER" -p "$ALTOOL_PASSWORD" --verbose

      - name: Upload iOS ipa to App Store Connect
        env:
          ALTOOL_USER:     ${{ secrets.APPLE_ID }}
          ALTOOL_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
        run: |
          xcrun altool --upload-app \
            -f SafariExtProject/Exported-ios/${{ env.APP_NAME }}.ipa \
            -t ios -u "$ALTOOL_USER" -p "$ALTOOL_PASSWORD" --verbose
