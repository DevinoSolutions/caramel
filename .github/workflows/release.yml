name: Release â€“ Caramel Extension

on:
  push:
    branches: [ dev ]

env:
  SAFARI_BUNDLE_ID: ${{ vars.SAFARI_BUNDLE_ID }}

jobs:
  package:
    name: "ðŸ“¦ Package Extension"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: caramel-extension
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
          cache-dependency-path: caramel-extension/pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install

      - name: Build extension
        run: pnpm run build

      - name: Package extension
        run: pnpm run package

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: extension-package
          path: caramel-extension/extension.zip

  publish_chrome:
    name: "ðŸš€ Publish to Chrome Web Store"
    needs: package
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: extension-package
          path: .

      - name: Upload to Chrome Web Store (upload-only)
        uses: mnao305/chrome-extension-upload@v5.0.0
        with:
          file-path: extension.zip
          extension-id: ${{ secrets.CHROME_EXTENSION_ID }}
          client-id: ${{ secrets.CHROME_CLIENT_ID }}
          client-secret: ${{ secrets.CHROME_CLIENT_SECRET }}
          refresh-token: ${{ secrets.CHROME_REFRESH_TOKEN }}
          publish: false

  publish_safari:
    name: "ðŸš€ Publish to Apple App Store (Safari & iOS)"
    needs: package
    runs-on: macos-latest
    timeout-minutes: 30
    defaults:
      run:
        working-directory: caramel-extension
    steps:
      - uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: extension-package
          path: caramel-extension

      - name: Unzip extension
        run: unzip -q extension.zip

      - name: Install App Store Connect API key
        run: echo "${ASC_API_KEY_BASE64}" | base64 --decode > /tmp/AuthKey.p8
        env:
          ASC_API_KEY_BASE64: ${{ secrets.ASC_API_KEY_BASE64 }}

      # â‘   certificates (dist + dev)
      - name: Install signing certs
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: |
            ${{ secrets.APPLE_CERT_P12 }}      # distribution
            ${{ secrets.APPLE_DEV_CERT_P12 }}  # development
          p12-password: |
            ${{ secrets.APPLE_CERT_PASSWORD }}     # password for line 1
            ${{ secrets.APPLE_DEV_CERT_PASSWORD }} # password for line 2
          keychain-password: ${{ secrets.KEYCHAIN_PASSWORD }}

      # â‘¡  provisioning profile (if you really need one;
      #     optional when using automatic signing + API key)
      - name: Install provisioning profile
        uses: apple-actions/import-provisioning-profile@v1
        with:
          profile-base64: ${{ secrets.APPLE_PROVISION_PROFILE }}
          

      - name: Convert to Safari app (macOS & iOS)
        run: |
          xcrun safari-web-extension-converter dist \
            --project-location SafariExtProject \
            --app-name "Caramel" \
            --bundle-identifier "${SAFARI_BUNDLE_ID}" \
            --no-open --no-prompt --force --copy-resources

      # ---------- macOS archive ----------
      - name: Build & archive (macOS)
        run: |
          xcodebuild archive \
            -project SafariExtProject/Caramel/Caramel.xcodeproj \
            -scheme "Caramel (macOS)" \
            -configuration Release \
            -archivePath SafariExtProject/Caramel-macos.xcarchive \
            CODE_SIGN_STYLE=Automatic \
            DEVELOPMENT_TEAM="${{ secrets.APPLE_TEAM_ID }}" \
            PROVISIONING_PROFILE_SPECIFIER="" \
            -allowProvisioningUpdates \
            -authenticationKeyPath /tmp/AuthKey.p8 \
            -authenticationKeyID "${{ secrets.ASC_KEY_ID }}" \
            -authenticationKeyIssuerID "${{ secrets.ASC_ISSUER_ID }}"

      # ---------- iOS archive ----------
      - name: Build & archive (iOS)
        run: |
          xcodebuild archive \
            -project SafariExtProject/Caramel/Caramel.xcodeproj \
            -scheme "Caramel (iOS)" \
            -destination "generic/platform=iOS" \
            -configuration Release \
            -archivePath SafariExtProject/Caramel-ios.xcarchive \
            CODE_SIGN_STYLE=Automatic \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            DEVELOPMENT_TEAM="${{ secrets.APPLE_TEAM_ID }}" \
            PROVISIONING_PROFILE_SPECIFIER="" \
            -allowProvisioningUpdates \
            -authenticationKeyPath /tmp/AuthKey.p8 \
            -authenticationKeyID "${{ secrets.ASC_KEY_ID }}" \
            -authenticationKeyIssuerID "${{ secrets.ASC_ISSUER_ID }}"

      # ---------- macOS export ----------
      - name: Export (macOS)
        run: |
          xcodebuild -exportArchive \
            -archivePath SafariExtProject/Caramel-macos.xcarchive \
            -exportOptionsPlist SafariExtProject/Caramel-macos/Info.plist \
            -exportPath SafariExtProject/Exported-macos \
            -allowProvisioningUpdates \
            -authenticationKeyPath /tmp/AuthKey.p8 \
            -authenticationKeyID "${{ secrets.ASC_KEY_ID }}" \
            -authenticationKeyIssuerID "${{ secrets.ASC_ISSUER_ID }}"

      # ---------- iOS export ----------
      - name: Export (iOS)
        run: |
          xcodebuild -exportArchive \
            -archivePath SafariExtProject/Caramel-ios.xcarchive \
            -exportOptionsPlist SafariExtProject/Caramel-ios/Info.plist \
            -exportPath SafariExtProject/Exported-ios \
            -allowProvisioningUpdates \
            -authenticationKeyPath /tmp/AuthKey.p8 \
            -authenticationKeyID "${{ secrets.ASC_KEY_ID }}" \
            -authenticationKeyIssuerID "${{ secrets.ASC_ISSUER_ID }}"

      - name: Upload macOS pkg to App Store Connect
        env:
          ALTOOL_USER: ${{ secrets.APPLE_ID }}
          ALTOOL_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
        run: |
          xcrun altool --upload-app \
            -f SafariExtProject/Exported-macos/Caramel.pkg \
            -t osx -u "$ALTOOL_USER" -p "$ALTOOL_PASSWORD" --verbose

      - name: Upload iOS ipa to App Store Connect
        env:
          ALTOOL_USER: ${{ secrets.APPLE_ID }}
          ALTOOL_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
        run: |
          xcrun altool --upload-app \
            -f SafariExtProject/Exported-ios/Caramel.ipa \
            -t ios -u "$ALTOOL_USER" -p "$ALTOOL_PASSWORD" --verbose
