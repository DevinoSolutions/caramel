generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pg_trgm]
}

model Source {
  id        String       @id @default(cuid())
  source    String
  websites  String[]
  status    SourceStatus @default(REQUESTED)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(now()) @updatedAt
  coupons   Coupon[]
}

model Coupon {
  id              String       @id @default(cuid())
  code            String
  site            String
  title           String
  description     String
  rating          Float
  discount_type   DiscountType @default(PERCENTAGE)
  discount_amount Float?
  expiry          String
  expired         Boolean      @default(false)
  timesUsed       Int          @default(0)
  last_time_used  DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @default(now()) @updatedAt
  sourceId        String?
  Source          Source?      @relation(fields: [sourceId], references: [id])

  @@unique([code, site])
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  scope             String?
  id_token          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token")
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                String     @id @default(uuid())
  name              String?
  firstName         String?
  lastName          String?
  username          String?    @unique
  email             String?    @unique
  password          String?
  token             String?    @unique
  image             String?
  encodedPictureUrl String?
  tokenExpiry       DateTime?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @default(now()) @updatedAt
  deletedAt         DateTime?
  role              Role?      @default(USER)
  status            UserStatus @default(NOT_VERIFIED)
  accounts          Account[]
  sessions          Session[]

  @@map("users")
}

enum SourceStatus {
  ACTIVE
  INACTIVE
  REQUESTED
}

enum UserStatus {
  ACTIVE_USER
  DELETE_REQUESTED_BY_USER
  NOT_VERIFIED
  USER_BANNED
}

enum Role {
  USER
  MODERATOR
  ADMIN
  SUPER_ADMIN
}

enum DiscountType {
  PERCENTAGE
  CASH
  SAVE
}
